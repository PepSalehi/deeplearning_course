<style>
.footer {
    position: fixed; 
    top: 90%;
    text-align:right; 
    width:100%;
}

.banner {
    position: fixed; 
    top: 0%;
    text-align:right; 
    width:100%;
}

.reveal section img {
  border: 0px;
  box-shadow: 0 0 0 0;
}
.reveal table td {
  border: 0px;
}

.reveal table {
  border: 0px;
}

.reveal h1 {
  font-size: 1.6em;
}
</style>


Dive into Deep Learning
========================================================
author: Sigrid Keydana, Trivadis
date: 2017/01/08
autosize: true
incremental:false


Agenda
========================================================

&nbsp;

### Part 1: Getting a feel for deep learning

- Intro: What is Deep Learning and how does it work?
- Implementing a neural network in NumPy
- Linear regression using DL frameworks - meet Keras, TensorFlow, and PyTorch
- Under the hood: Backpropagation in NumPy vs. TensorFlow vs. PyTorch

&nbsp;

### Part 2: Going deeper with CNNs, LSTMs and hyperparameter tuning

- Convolutional Neural Networks (CNNs) for image classification
- Long Short Term Memory (LSTM) for sequential data
- Hyperparameter optimization with Keras and its scikit-learn API 


<div class="banner">
<img src='tri_logo_high.jpg' border=0 width='200px'>
</div>

<div class="footer">
<img src='cube3.png' border=0 width='122px'>
</div>


About this course 
========================================================


&nbsp;

- Focus is on code and examples (Python)
- All code is made available as Jupyter notebooks
- Main framework used is Keras
- But part 1 also demonstrates examples in TensorFlow and PyTorch, for comparison


<div class="banner">
<img src='tri_logo_high.jpg' border=0 width='200px'>
</div>

<div class="footer">
<img src='cube3.png' border=0 width='122px'>
</div>


Notebooks
========================================================


&nbsp;

### Part 1

- Implementing a deep neural network with NumPy: dl_with_numpy.ipynb
- Linear regression, the usual way (using scikit-learn): linear_regression_sklearn.ipynb
- Keras basics: keras_basics.ipynb
- Linear regression with Keras: linear_regression_keras.ipynb
- TensorFlow basics: tensorflow_basics.ipynb
- Linear regression with TensorFlow: linear_regression_tensorflow.ipynb
- PyTorch basics: pytorch_basics.ipynb
- Linear regression with PyTorch: linear_regression_pytorch.ipynb
- Backpropagation in NumPy vs TensorFlow vs PyTorch: backprop_numpy_tf_pytorch.ipynb


<div class="banner">
<img src='tri_logo_high.jpg' border=0 width='200px'>
</div>

<div class="footer">
<img src='cube3.png' border=0 width='122px'>
</div>


Notebooks
========================================================


&nbsp;

### Part 2

- Convolutional Neural Networks with Keras (1): cnn_keras.ipynb
- Convolutional Neural Networks with Keras (2): cnn_keras_pretrained.ipynb
- Convolutional Neural Networks with Keras (3): cnn_keras_pretrained_2.ipynb
- Long Short Term Memory (LSTM) with Keras (1): lstm_keras_1.ipynb
- Long Short Term Memory (LSTM) with Keras (2): lstm_keras_2.ipynb


<div class="banner">
<img src='tri_logo_high.jpg' border=0 width='200px'>
</div>

<div class="footer">
<img src='cube3.png' border=0 width='122px'>
</div>


